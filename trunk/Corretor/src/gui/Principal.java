package gui;

import dados.ListaQuestoes;
import dados.Questao;
import gui.modelos.KeyListenerJanela;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import logica.GerenciaReversao;
import logica.GerenciaSerializacao;
import logica.GerenciaCorrecao;
import logica.TestaConfiguracao;
import dados.PastaCorrecao;

/**
 *
 * @author  UltraXP
 */
public class Principal extends javax.swing.JFrame {
    
    private static int OPCAO_ENT = 0;
    private static int OPCAO_REV = 1;
    private static int OPCAO_COR = 2;
    private static int OPCAO_NOT = 3;
    private static int OPCAO_COP = 4;
    private static int OPCAO_SAL = 5;
    private static int OPCAO_FEC = 6;
        
    /** Creates new form Principal */
    public Principal() {
        initComponents();
        inicializarJFileChooser();
        inicializarJOptionPane();
        Janelas.alinharContainer(this);
        limparContentPane();
        desabilitarOpcoes(new int[] { 0, 1, 2, 3, 4, 5, 6});
        this.addKeyListener(new KeyListenerJanela());
    }
    
    private void inicializarJFileChooser() {
        UIManager.put("FileChooser.acceptAllFileFilterText", "Todos os arquivos");
        
        UIManager.put("FileChooser.openButtonToolTipText", "Abrir diretório selecionado");
        UIManager.put("FileChooser.openButtonText", "Abrir");
        UIManager.put("FileChooser.cancelButtonToolTipText", "Cancelar diálogo");
        UIManager.put("FileChooser.cancelButtonText", "Cancelar");
        
        UIManager.put("FileChooser.lookInLabelText", "Examinar:");
        UIManager.put("FileChooser.fileNameLabelText", "Nome do arquivo:");
        UIManager.put("FileChooser.filesOfTypeLabelText", "Arquivos do tipo:");
        
        UIManager.put("FileChooser.detailsViewButtonToolTipText", "Detalhes");
        UIManager.put("FileChooser.listViewButtonToolTipText", "Lista");
        UIManager.put("FileChooser.upFolderToolTipText", "Um nível acima");
        UIManager.put("FileChooser.newFolderToolTipText", "Criar nova pasta");
    }
    
    private void inicializarJOptionPane() {
        UIManager.put("OptionPane.yesButtonText", "Sim");
        UIManager.put("OptionPane.noButtonText", "Não");
        UIManager.put("OptionPane.cancelButtonText", "Cancelar");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btnNova = new javax.swing.JButton();
        btnImportar = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        btnEntradas = new javax.swing.JButton();
        btnReverter = new javax.swing.JButton();
        jToolBar3 = new javax.swing.JToolBar();
        btnCorrigir = new javax.swing.JButton();
        barraMenu = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        itemNova = new javax.swing.JMenuItem();
        itemImportar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        itemSalvar = new javax.swing.JMenuItem();
        itemFechar = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        itemSair = new javax.swing.JMenuItem();
        menuFerramentas = new javax.swing.JMenu();
        itemEntradas = new javax.swing.JMenuItem();
        itemNotas = new javax.swing.JMenuItem();
        itemCopia = new javax.swing.JMenuItem();
        itemReverter = new javax.swing.JMenuItem();
        menuConstruir = new javax.swing.JMenu();
        itemCorrigir = new javax.swing.JMenuItem();
        menuAjuda = new javax.swing.JMenu();
        itemAjuda = new javax.swing.JMenuItem();
        itemSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Corretor de Programas em Pascal");

        jToolBar1.setFloatable(false);
        jToolBar1.setMaximumSize(new java.awt.Dimension(9, 32));
        jToolBar1.setMinimumSize(new java.awt.Dimension(9, 32));
        jToolBar1.setPreferredSize(new java.awt.Dimension(100, 32));

        btnNova.setToolTipText("Nova Correção");
        btnNova.setMaximumSize(new java.awt.Dimension(30, 30));
        btnNova.setMinimumSize(new java.awt.Dimension(30, 30));
        btnNova.setPreferredSize(new java.awt.Dimension(30, 30));
        btnNova.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNova);

        btnImportar.setToolTipText("Importar Correção");
        btnImportar.setMaximumSize(new java.awt.Dimension(30, 30));
        btnImportar.setMinimumSize(new java.awt.Dimension(30, 30));
        btnImportar.setPreferredSize(new java.awt.Dimension(30, 30));
        btnImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnImportar);

        jToolBar2.setFloatable(false);

        btnEntradas.setToolTipText("Entradas e Gabaritos");
        btnEntradas.setMaximumSize(new java.awt.Dimension(30, 30));
        btnEntradas.setMinimumSize(new java.awt.Dimension(30, 30));
        btnEntradas.setPreferredSize(new java.awt.Dimension(30, 30));
        btnEntradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEntradasActionPerformed(evt);
            }
        });
        jToolBar2.add(btnEntradas);

        btnReverter.setToolTipText("Reverter Correção");
        btnReverter.setMaximumSize(new java.awt.Dimension(30, 30));
        btnReverter.setMinimumSize(new java.awt.Dimension(30, 30));
        btnReverter.setPreferredSize(new java.awt.Dimension(30, 30));
        btnReverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReverterActionPerformed(evt);
            }
        });
        jToolBar2.add(btnReverter);

        jToolBar3.setFloatable(false);

        btnCorrigir.setToolTipText("Corrigir");
        btnCorrigir.setMaximumSize(new java.awt.Dimension(30, 30));
        btnCorrigir.setMinimumSize(new java.awt.Dimension(30, 30));
        btnCorrigir.setPreferredSize(new java.awt.Dimension(30, 30));
        btnCorrigir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCorrigirActionPerformed(evt);
            }
        });
        jToolBar3.add(btnCorrigir);

        menuArquivo.setText("Arquivo");

        itemNova.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        itemNova.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/novacorrecao.png"))); // NOI18N
        itemNova.setText("Nova Correção");
        itemNova.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNovaActionPerformed(evt);
            }
        });
        menuArquivo.add(itemNova);

        itemImportar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        itemImportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/impcorrecao.png"))); // NOI18N
        itemImportar.setText("Importar Correção...");
        itemImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemImportarActionPerformed(evt);
            }
        });
        menuArquivo.add(itemImportar);
        menuArquivo.add(jSeparator1);

        itemSalvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        itemSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/salvar.png"))); // NOI18N
        itemSalvar.setText("Salvar");
        itemSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSalvarActionPerformed(evt);
            }
        });
        menuArquivo.add(itemSalvar);

        itemFechar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        itemFechar.setText("Fechar Correção");
        itemFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFecharActionPerformed(evt);
            }
        });
        menuArquivo.add(itemFechar);
        menuArquivo.add(jSeparator2);

        itemSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        itemSair.setText("Sair");
        itemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSairActionPerformed(evt);
            }
        });
        menuArquivo.add(itemSair);

        barraMenu.add(menuArquivo);

        menuFerramentas.setText("Ferramentas");

        itemEntradas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        itemEntradas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/entradas.png"))); // NOI18N
        itemEntradas.setText("Entradas e Gabaritos");
        itemEntradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemEntradasActionPerformed(evt);
            }
        });
        menuFerramentas.add(itemEntradas);

        itemNotas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        itemNotas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/notas.png"))); // NOI18N
        itemNotas.setText("Proporção das Notas");
        itemNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNotasActionPerformed(evt);
            }
        });
        menuFerramentas.add(itemNotas);

        itemCopia.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        itemCopia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/copia.png"))); // NOI18N
        itemCopia.setText("Cópia de Arquivo");
        itemCopia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCopiaActionPerformed(evt);
            }
        });
        menuFerramentas.add(itemCopia);

        itemReverter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        itemReverter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/reverter.png"))); // NOI18N
        itemReverter.setText("Reverter Correção");
        itemReverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemReverterActionPerformed(evt);
            }
        });
        menuFerramentas.add(itemReverter);

        barraMenu.add(menuFerramentas);

        menuConstruir.setText("Construir");

        itemCorrigir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        itemCorrigir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/corrigir.png"))); // NOI18N
        itemCorrigir.setText("Corrigir");
        itemCorrigir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCorrigirActionPerformed(evt);
            }
        });
        menuConstruir.add(itemCorrigir);

        barraMenu.add(menuConstruir);

        menuAjuda.setText("Ajuda");

        itemAjuda.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        itemAjuda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/contajuda.png"))); // NOI18N
        itemAjuda.setText("Conteúdos de Ajuda");
        itemAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAjudaActionPerformed(evt);
            }
        });
        menuAjuda.add(itemAjuda);

        itemSobre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/sobre.png"))); // NOI18N
        itemSobre.setText("Sobre");
        itemSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSobreActionPerformed(evt);
            }
        });
        menuAjuda.add(itemSobre);

        barraMenu.add(menuAjuda);

        setJMenuBar(barraMenu);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jToolBar2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jToolBar3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(493, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                .add(408, 408, 408))
            .add(layout.createSequentialGroup()
                .add(jToolBar2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(jToolBar3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {jToolBar1, jToolBar2}, org.jdesktop.layout.GroupLayout.VERTICAL);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFecharActionPerformed
        fecharCorrecao();
    }//GEN-LAST:event_itemFecharActionPerformed

    private void itemSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSalvarActionPerformed
        salvar();
    }//GEN-LAST:event_itemSalvarActionPerformed

    private void itemCopiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCopiaActionPerformed
        new CopiaArquivo(this).setVisible(true);
    }//GEN-LAST:event_itemCopiaActionPerformed

    private void itemNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNotasActionPerformed
        new NotasProporcao(this).setVisible(true);
    }//GEN-LAST:event_itemNotasActionPerformed

    private void btnCorrigirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCorrigirActionPerformed
        corrigir();
    }//GEN-LAST:event_btnCorrigirActionPerformed

    private void btnReverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReverterActionPerformed
        reverter();
    }//GEN-LAST:event_btnReverterActionPerformed

    private void btnEntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEntradasActionPerformed
        entradas();
    }//GEN-LAST:event_btnEntradasActionPerformed

    private void btnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarActionPerformed
        importarCorrecao();
    }//GEN-LAST:event_btnImportarActionPerformed

    private void btnNovaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaActionPerformed
        novaCorrecao();
    }//GEN-LAST:event_btnNovaActionPerformed

    private void itemCorrigirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCorrigirActionPerformed
        corrigir();
    }//GEN-LAST:event_itemCorrigirActionPerformed

    private void itemReverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemReverterActionPerformed
        reverter();
    }//GEN-LAST:event_itemReverterActionPerformed

    private void itemAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAjudaActionPerformed
        new Ajuda(this).setVisible(true);
    }//GEN-LAST:event_itemAjudaActionPerformed

    private void itemSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSobreActionPerformed
        new Sobre(this).setVisible(true);
    }//GEN-LAST:event_itemSobreActionPerformed

    private void itemImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemImportarActionPerformed
        importarCorrecao();
    }//GEN-LAST:event_itemImportarActionPerformed

    private void itemNovaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNovaActionPerformed
        novaCorrecao();
    }//GEN-LAST:event_itemNovaActionPerformed

    private void itemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSairActionPerformed
        sair();
    }//GEN-LAST:event_itemSairActionPerformed

    private void itemEntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemEntradasActionPerformed
        entradas();
    }//GEN-LAST:event_itemEntradasActionPerformed
    
    private void novaCorrecao() {
        UIManager.put("FileChooser.openDialogTitleText", "Nova Correção");
        File diretorio = null;
        
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int resultado = fc.showOpenDialog(this);
        Janelas.alinharContainer(fc);
        if (resultado == JFileChooser.CANCEL_OPTION) {
            diretorio = null;
        } else {
            diretorio = fc.getSelectedFile();
            try {
                TestaConfiguracao tc = new TestaConfiguracao();
                tc.testarConfiguracao(diretorio);
                habilitarOpcoes(new int[] { 0, 1, 5, 6 });
                JOptionPane.showMessageDialog(this, "Organização das pastas concluída!", 
                        "Concluído!", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "O diret\u00f3rio informado n\u00e3o " +
            "\u00e9 v\u00e1lido,\n pois n\u00e3o cont\u00e9m os .pas!", 
                        "Diret\u00f3rio Inv\u00e1lido!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void importarCorrecao() {
        UIManager.put("FileChooser.openDialogTitleText", "Importar Correção...");
        File diretorio = null;
        
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int resultado = fc.showOpenDialog(this);
        Janelas.alinharContainer(fc);
        if (resultado == JFileChooser.CANCEL_OPTION) {
            diretorio = null;
        } else {
            diretorio = fc.getSelectedFile();
            try {
                GerenciaSerializacao gerSer = new GerenciaSerializacao();
                gerSer.desserializar(diretorio);
                if (ListaQuestoes.getArrayListQuestoes().size() >= 1) {
                    habilitarOpcoes(new int[] { 0, 1, 2, 3, 4, 5, 6 });
                    this.getContentPane().setVisible(false);
                    this.setContentPane(new PastaCorrigida());
                    this.getContentPane().setVisible(true);
                } else {
                    habilitarOpcoes(new int[] { 0, 1, 5, 6 });
                }
                JOptionPane.showMessageDialog(this, "Importação Concluída!", "Concluído!",
                    JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "O diret\u00f3rio informado n\u00e3o " +
            "\u00e9 v\u00e1lido,\n pois n\u00e3o foi feita uma corre\u00e7\u00e3o nele!", 
                        "Diret\u00f3rio Inv\u00e1lido!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void salvar() {
        GerenciaSerializacao gerSer = new GerenciaSerializacao();
        gerSer.serializar();
        JOptionPane.showMessageDialog(null, "Alterações salvas com sucesso!", "Alterações Salvas!", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void fecharCorrecao() {
        if(PastaCorrecao.getModificado()) {
            int opcao = JOptionPane.showConfirmDialog(this, "Existem alterações não " +
                    "salvas, \n gostaria de salvá-las antes de fechar?", "Confirmação!",
                    JOptionPane.YES_NO_CANCEL_OPTION);
            if (opcao == 0) {
                salvar();
                desabilitarOpcoes(new int[] { 0, 1, 2, 3, 4, 5, 6});
            } else if (opcao == 1) {
                PastaCorrecao.setInstancia(null);
            } else {
                return;
            }
        } else {
            desabilitarOpcoes(new int[] { 0, 1, 2, 3, 4, 5, 6});
            PastaCorrecao.setInstancia(null);
        }
        limparContentPane();
    }
    
    private void sair() {
        if(PastaCorrecao.getModificado()) {
            int opcao = JOptionPane.showConfirmDialog(this, "Existem alterações não " +
                    "salvas, \n gostaria de salvá-las antes de sair?", "Confirmação!",
                    JOptionPane.YES_NO_CANCEL_OPTION);
            if (opcao == 0) {
                salvar();
            } else if (opcao == 2) {
                return;
            }
        }
        this.dispose();
    }
    
    private void entradas() {
        Testes testes = null;
        if (!ListaQuestoes.getArrayListQuestoes().isEmpty()) {
            testes = new Testes(this, (ArrayList<Questao>)ListaQuestoes.getArrayListQuestoes().clone());
            testes.setVisible(true);
        } else {
            testes = new Testes(this);
            testes.setVisible(true);
        }
        
        if (!ListaQuestoes.getArrayListQuestoes().isEmpty()) {
            habilitarOpcoes(new int[] { 2, 3, 4 });
            this.getContentPane().setVisible(false);
            this.setContentPane(new PastaCorrigida());
            this.getContentPane().setVisible(true);
        } else {
            desabilitarOpcoes(new int[] { 2, 3, 4 });
            this.getContentPane().setVisible(false);
            this.setContentPane(new JPanel());
            this.getContentPane().setVisible(true);
        }
    }
    
    private void corrigir() {
        GerenciaCorrecao testaCor = new GerenciaCorrecao();
        limparContentPane();
        testaCor.corrigir();
        this.getContentPane().setVisible(false);
        this.setContentPane(new TabelaNotas(this));
        this.getContentPane().setVisible(true);
        JOptionPane.showMessageDialog(this, "Correção Concluída!", "Concluído!",
                JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void reverter() {
        int opcao = JOptionPane.showConfirmDialog(this, "Você tem certeza que deseja " +
                "reverter a correção?", "Confirmação!", JOptionPane.YES_NO_OPTION);
        if (opcao == 0) {
            GerenciaReversao gerRev = new GerenciaReversao();
            gerRev.reverter();
            limparContentPane();
            desabilitarOpcoes(new int[] { 0, 1, 2, 3, 4, 5, 6});
            JOptionPane.showMessageDialog(this, "Reversão Concluída!", "Concluído!",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }
       
    private void desabilitarOpcoes(int[] opcoes) {
        for (int opcao : opcoes) {
            if (opcao == OPCAO_ENT) {
                itemEntradas.setEnabled(false);
            } else if (opcao == OPCAO_REV) {
                itemReverter.setEnabled(false);
            } else if (opcao == OPCAO_COR) {
                itemCorrigir.setEnabled(false);
            } else if (opcao == OPCAO_NOT) {
                itemNotas.setEnabled(false);
            } else if (opcao == OPCAO_COP) {
                itemCopia.setEnabled(false);
            } else if (opcao == OPCAO_SAL) {
                itemSalvar.setEnabled(false);
            } else if (opcao == OPCAO_FEC) {
                itemFechar.setEnabled(false);
            }
        }
    }
    
    private void habilitarOpcoes(int[] opcoes) {
        for (int opcao : opcoes) {
            if (opcao == OPCAO_ENT) {
                itemEntradas.setEnabled(true);
            } else if (opcao == OPCAO_REV) {
                itemReverter.setEnabled(true);
            } else if (opcao == OPCAO_COR) {
                itemCorrigir.setEnabled(true);
            } else if (opcao == OPCAO_NOT) {
                itemNotas.setEnabled(true);
            } else if (opcao == OPCAO_COP) {
                itemCopia.setEnabled(true);
            } else if (opcao == OPCAO_SAL) {
                itemSalvar.setEnabled(true);
            } else if (opcao == OPCAO_FEC) {
                itemFechar.setEnabled(true);
            }
        }
    }
    
    private void limparContentPane() {
        this.getContentPane().setVisible(false);
        this.setContentPane(new JPanel());
        this.getContentPane().setVisible(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton btnCorrigir;
    private javax.swing.JButton btnEntradas;
    private javax.swing.JButton btnImportar;
    private javax.swing.JButton btnNova;
    private javax.swing.JButton btnReverter;
    private javax.swing.JMenuItem itemAjuda;
    private javax.swing.JMenuItem itemCopia;
    private javax.swing.JMenuItem itemCorrigir;
    private javax.swing.JMenuItem itemEntradas;
    private javax.swing.JMenuItem itemFechar;
    private javax.swing.JMenuItem itemImportar;
    private javax.swing.JMenuItem itemNotas;
    private javax.swing.JMenuItem itemNova;
    private javax.swing.JMenuItem itemReverter;
    private javax.swing.JMenuItem itemSair;
    private javax.swing.JMenuItem itemSalvar;
    private javax.swing.JMenuItem itemSobre;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JMenu menuAjuda;
    private javax.swing.JMenu menuArquivo;
    private javax.swing.JMenu menuConstruir;
    private javax.swing.JMenu menuFerramentas;
    // End of variables declaration//GEN-END:variables
    
}
